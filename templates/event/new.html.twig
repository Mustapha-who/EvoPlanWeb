{% extends 'User/base_dashboard.html.twig' %}

{% block title %}Create New Event{% endblock %}

{% block content %}
<style>
/* Style uniquement pour les messages d'erreur des dates */
.date-error {
    background-color: rgba(220, 53, 69, 0.1);
    padding: 4px 8px;
    border-radius: 4px;
    display: inline-flex;
    align-items: center;
}
.date-error i {
    font-size: 0.75rem;
    margin-right: 5px;
}
</style>

<header class="page-header page-header-dark bg-gradient-primary-to-secondary pb-10">
    <div class="container-xl px-4">
        <div class="page-header-content pt-4">
            <div class="row align-items-center justify-content-between">
                <div class="col-auto mt-4">
                    <h1 class="page-header-title">
                        <div class="page-header-icon"><i data-feather="plus-circle"></i></div>
                        Create Event
                    </h1>
                    <div class="page-header-subtitle">Fill in the details to add a new event</div>
                </div>
            </div>
        </div>
    </div>
</header>

<div class="container-xl px-4 mt-n10">
    <div class="row">
        <div class="col-lg-9 mx-auto">
            <div class="card mb-4">
                <div class="card-header">Event Details</div>
                <div class="card-body">
                    {% for message in app.flashes('error') %}
                        <div class="alert alert-danger">{{ message }}</div>
                    {% endfor %}

                    {{ form_start(form, {'attr': {'enctype': 'multipart/form-data', 'id': 'eventForm'}}) }}

                    <!-- Champ d'upload d'image -->
                    <div class="mb-3">
                        <label class="form-label">Event Image</label>
                        {{ form_widget(form.imageEvent, { 'attr': {'class': 'form-control', 'onchange': 'previewImage(event)'} }) }}
                        <img id="imagePreview" src="" class="mt-3" style="max-width: 200px; display: none;" />
                    </div>

                    <!-- Champs existants -->
                    <div class="mb-3">
                        <label class="form-label">Event Name</label>
                        {{ form_widget(form.nom, { 'attr': {'class': 'form-control', 'placeholder': 'Enter event name'} }) }}
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <div class="input-group">
                            {{ form_widget(form.description, { 'attr': {
                                'class': 'form-control',
                                'rows': 5,
                                'placeholder': 'Describe the event',
                                'id': 'event_description'
                            } }) }}
                            <button type="button"
                                    class="btn btn-outline-primary"
                                    id="generateDescriptionBtn"
                                    data-loading-text="<span class='spinner-border spinner-border-sm'></span> Génération...">
                                <i class="fas fa-magic me-1"></i> Générer avec AI
                            </button>
                        </div>
                        <small class="text-muted">Cliquez sur le bouton pour générer une description automatique</small>
                    </div>

                    <!-- Section Date avec messages d'erreur stylés -->
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Start Date</label>
                                {{ form_widget(form.dateDebut, { 'attr': {'class': 'form-control datetimepicker'} }) }}
                                <div class="date-error text-danger small mt-1" id="startDateError" style="display: none;">
                                    <i class="fas fa-exclamation-circle me-1"></i>
                                    <span>La date de début doit être égale ou supérieure à aujourd'hui</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">End Date</label>
                                {{ form_widget(form.dateFin, { 'attr': {'class': 'form-control datetimepicker'} }) }}
                                <div class="date-error text-danger small mt-1" id="endDateError" style="display: none;">
                                    <i class="fas fa-exclamation-circle me-1"></i>
                                    <span>La date de fin doit être supérieure à la date de début</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Autres champs -->
                    <div class="mb-3">
                        <label class="form-label">Location</label>
                        {{ form_widget(form.lieu, { 'attr': {'class': 'form-control', 'placeholder': 'Enter event location'} }) }}
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Price (TND)</label>
                                {{ form_widget(form.prix, { 'attr': {'class': 'form-control', 'placeholder': 'Enter price'} }) }}
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Capacity</label>
                                {{ form_widget(form.capacite, { 'attr': {'class': 'form-control', 'placeholder': 'Enter max capacity'} }) }}
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Event Status</label>
                        {{ form_widget(form.statut, { 'attr': {'class': 'form-control'} }) }}
                    </div>

                    <button type="submit" class="btn btn-primary"><i data-feather="save"></i> Save Event</button>

                    {{ form_end(form) }}
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Scripts -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/fr.js"></script>

<script>
function previewImage(event) {
    var input = event.target;
    var reader = new FileReader();
    reader.onload = function(){
        var imgElement = document.getElementById("imagePreview");
        imgElement.src = reader.result;
        imgElement.style.display = "block";
    };
    reader.readAsDataURL(input.files[0]);
}

document.addEventListener('DOMContentLoaded', function() {
    // Initialisation du datepicker
    flatpickr('.datetimepicker', {
        enableTime: true,
        dateFormat: "Y-m-d H:i",
        time_24hr: true,
        locale: "fr",
        minDate: "today"
    });

    // Gestion du formulaire principal
    const form = document.getElementById('eventForm');
    if (form) {
        form.addEventListener('submit', function(e) {
            // Validation du formulaire...
            // (garder votre code existant de validation ici)
        });
    }

    // Gestion de la génération AI
    const generateBtn = document.getElementById('generateDescriptionBtn');
    const descriptionField = document.getElementById('event_description');

    if (generateBtn && descriptionField) {
        generateBtn.addEventListener('click', async function() {
            const btn = this;
            const originalHtml = btn.innerHTML;

            // Afficher l'indicateur de chargement
            btn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Génération...';
            btn.disabled = true;

            try {
                // Récupérer les valeurs du formulaire
                const formData = {
                    nom: document.getElementById('{{ form.nom.vars.id }}').value,
                    dateDebut: document.getElementById('{{ form.dateDebut.vars.id }}').value,
                    lieu: document.getElementById('{{ form.lieu.vars.id }}').value,
                    prix: document.getElementById('{{ form.prix.vars.id }}').value,
                    capacite: document.getElementById('{{ form.capacite.vars.id }}').value,
                    statut: document.getElementById('{{ form.statut.vars.id }}').value
                };

                // Vérification des champs requis
                if (!formData.nom) {
                    throw new Error("Le nom de l'événement est requis pour générer une description");
                }

                const response = await fetch('{{ path('app_event_new') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({
                        generateDescription: true,
                        ...formData
                    })
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error || 'Erreur lors de la requête');
                }

                const data = await response.json();

                if (data.error) {
                    throw new Error(data.error);
                }

                // Insérer la description générée
                descriptionField.value = data.description;

            } catch (error) {
                console.error('Erreur:', error);
                alert('Erreur lors de la génération: ' + error.message);
            } finally {
                // Réinitialiser le bouton
                btn.innerHTML = originalHtml;
                btn.disabled = false;
            }
        });
    }
});
</script>
{% endblock %}