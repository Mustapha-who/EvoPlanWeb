{% extends 'base.html.twig' %}

{% block title %}Create New Event{% endblock %}

{% block body %}
<header class="page-header page-header-dark bg-gradient-primary-to-secondary pb-10">
    <div class="container-xl px-4">
        <div class="page-header-content pt-4">
            <div class="row align-items-center justify-content-between">
                <div class="col-auto mt-4">
                    <h1 class="page-header-title">
                        <div class="page-header-icon"><i data-feather="plus-circle"></i></div>
                        Create Event
                    </h1>
                    <div class="page-header-subtitle">Fill in the details to add a new event</div>
                </div>
            </div>
        </div>
    </div>
</header>

<div class="container-xl px-4 mt-n10">
    <div class="row">
        <div class="col-lg-9 mx-auto">
            <div class="card mb-4">
                <div class="card-header">Event Details</div>
                <div class="card-body">
                   {% for message in app.flashes('error') %}
                           <div class="alert alert-danger">{{ message }}</div>
                       {% endfor %}

                       {{ form_start(form, {'attr': {'enctype': 'multipart/form-data'}}) }}

                    <!-- Champ d'upload d'image en premier -->
                    <div class="mb-3">
                        <label class="form-label">Event Image</label>
                        {{ form_widget(form.imageEvent, { 'attr': {'class': 'form-control', 'onchange': 'previewImage(event)'} }) }}
                        <img id="imagePreview" src="" class="mt-3" style="max-width: 200px; display: none;" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Event Name</label>
                        {{ form_widget(form.nom, { 'attr': {'class': 'form-control', 'placeholder': 'Enter event name'} }) }}
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        {{ form_widget(form.description, { 'attr': {'class': 'form-control', 'rows': 3, 'placeholder': 'Describe the event'} }) }}
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Start Date</label>
                                {{ form_widget(form.dateDebut, { 'attr': {'class': 'form-control'} }) }}
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">End Date</label>
                                {{ form_widget(form.dateFin, { 'attr': {'class': 'form-control'} }) }}
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Location</label>
                        {{ form_widget(form.lieu, { 'attr': {'class': 'form-control', 'placeholder': 'Enter event location'} }) }}
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Price (TND)</label>
                                {{ form_widget(form.prix, { 'attr': {'class': 'form-control', 'placeholder': 'Enter price'} }) }}
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Capacity</label>
                                {{ form_widget(form.capacite, { 'attr': {'class': 'form-control', 'placeholder': 'Enter max capacity'} }) }}
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Event Status</label>
                        {{ form_widget(form.statut, { 'attr': {'class': 'form-control'} }) }}
                    </div>

                    <button type="submit" class="btn btn-primary"><i data-feather="save"></i> Save Event</button>

                    {{ form_end(form) }}
                </div>
            </div>
        </div>
    </div>
</div>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/fr.js"></script>

<!-- Script pour afficher l'aperçu de l'image -->
<script>
function previewImage(event) {
    var input = event.target;
    var reader = new FileReader();
    reader.onload = function(){
        var imgElement = document.getElementById("imagePreview");
        imgElement.src = reader.result;
        imgElement.style.display = "block";
    };
    reader.readAsDataURL(input.files[0]);
}

// Validation côté client
document.addEventListener('DOMContentLoaded', function() {
      flatpickr('.datetimepicker', {
             enableTime: true,
             dateFormat: "Y-m-d H:i",
             time_24hr: true,
             locale: "fr",
             minDate: "today"
         });
    const form = document.querySelector('form');


    if (form) {
        form.addEventListener('submit', function(e) {
            // Vérification des champs obligatoires
            const requiredFields = form.querySelectorAll('[required]');
            let isValid = true;

            requiredFields.forEach(field => {
                if (!field.value.trim()) {
                    isValid = false;
                    field.classList.add('is-invalid');
                } else {
                    field.classList.remove('is-invalid');
                }
            });

            // Vérification des dates
            const startDateInput = document.getElementById('{{ form.dateDebut.vars.id }}');
            const endDateInput = document.getElementById('{{ form.dateFin.vars.id }}');

            if (startDateInput && endDateInput) {
                const startDate = new Date(startDateInput.value);
                const endDate = new Date(endDateInput.value);
                const today = new Date();
                today.setHours(0, 0, 0, 0);

                if (startDate < today) {
                    isValid = false;
                    startDateInput.classList.add('is-invalid');
                    alert('La date de début doit être égale ou postérieure à aujourd\'hui');
                }

                if (endDate <= startDate) {
                    isValid = false;
                    endDateInput.classList.add('is-invalid');
                    alert('La date de fin doit être postérieure à la date de début');
                }
            }

            if (!isValid) {
                e.preventDefault();
            }
        });
    }
});
</script>


{% endblock %}
