{% extends 'User/base_dashboard.html.twig' %}

{% block title %}Edit Contract{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        /* Hide server-side error messages on field change */
        .form-group.field-changed .invalid-feedback {
            display: none !important;
        }
        
        /* Apply special styling to error messages */
        .invalid-feedback {
            color: #dc3545;
            font-weight: 500;
            margin-top: 0.25rem;
        }
    </style>
{% endblock %}

{% block form_errors %}
    {# Show errors regardless of method to ensure validation errors display #}
    {% if errors|length > 0 %}
        {% for error in errors %}
            <div class="invalid-feedback d-block mb-2">
                {{ error.message }}
            </div>
        {% endfor %}
    {% endif %}
{% endblock form_errors %}

{# Override form_row to include the error display #}
{% block form_row %}
    {% set widget_attr = {} %}
    {% if help is defined %}
        {% set widget_attr = {attr: {'aria-describedby': id ~ "_help"}} %}
    {% endif %}
    
    {% set row_class = row_attr.class|default('') %}
    <div class="form-group {{ row_class }}">
        {{ form_label(form) }}
        
        {# Add is-invalid class when there are errors #}
        {% if not form.vars.valid %}
            {% set attr = attr|merge({class: (attr.class|default('') ~ ' is-invalid')|trim}) %}
        {% endif %}
        
        {# Merge placeholder if it exists in attr #}
        {% if attr.placeholder is defined %}
            {% set attr = widget_attr.attr|default({})|merge({'placeholder': attr.placeholder}) %}
            {% set widget_attr = widget_attr|merge({'attr': attr}) %}
        {% endif %}
        
        {{ form_widget(form, widget_attr) }}
        
        {# Show errors #}
        {{ form_errors(form) }}
        
        {# Show help text for non-empty help only #}
        {% if help is defined and help is not empty %}
            <div id="{{ id }}_help" class="form-text text-muted">
                {{ help }}
            </div>
        {% endif %}
    </div>
{% endblock form_row %}

{% block content %}
    <header class="page-header page-header-dark bg-gradient-primary-to-secondary pb-10">
        <div class="container-xl px-4">
            <div class="page-header-content pt-4">
                <div class="row align-items-center justify-content-between">
                    <div class="col-auto mt-4">
                        <h1 class="page-header-title">Edit Contract</h1>
                        <div class="page-header-subtitle">Update contract details</div>
                    </div>
                    <div class="col-12 col-xl-auto mt-4">
                        <div class="btn-group">
                            <a href="{{ path('app_contract_index') }}" class="btn btn-white lift">
                                <i class="fas fa-arrow-left me-1"></i>
                                Back to list
                            </a>
                            <a href="{{ path('app_contract_show', {'id_contract': contract.getId()}) }}" 
                               class="btn btn-primary lift">
                                <i class="fas fa-eye me-1"></i>
                                View Details
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <!-- Main page content-->
    <div class="container-xl px-4 mt-n10">
        <div class="row">
            <div class="col">
                <div class="card mb-4">
                    <div class="card-header">Contract Information</div>
                    <div class="card-body">
                        {# Set this to avoid duplicate error messages #}
                        {% form_theme form _self %}
                        {{ include('contract/_form.html.twig', {'button_label': 'Update'}) }}
                    </div>
                    <div class="card-footer d-flex justify-content-between">
                        <a href="{{ path('app_contract_index') }}" class="btn btn-light">
                            <i class="fas fa-arrow-left me-1"></i>
                            Back to list
                        </a>
                        {{ include('contract/_delete_form.html.twig', {'contract': contract}) }}
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            feather.replace();
            
            // Get form elements
            const contractForm = document.querySelector('form[name="contract"]');
            const partnerField = document.querySelector('[name$="[id_partner]"]');
            const partnershipField = document.querySelector('[name$="[id_partnership]"]');
            const startDateField = document.querySelector('[name$="[date_debut]"]');
            const endDateField = document.querySelector('[name$="[date_fin]"]');
            const statusField = document.querySelector('[name$="[status]"]');
            const termsField = document.querySelector('[name$="[terms]"]');
            
            // Function to clear error message for a specific field
            function clearErrorForField(field) {
                if (!field) return;
                
                field.classList.remove('is-invalid');
                
                // Find the closest container and add field-changed class
                const parentContainer = field.closest('.form-group');
                if (parentContainer) {
                    parentContainer.classList.add('field-changed');
                    const errorElements = parentContainer.querySelectorAll('.invalid-feedback');
                    errorElements.forEach(error => {
                        error.style.display = 'none';
                    });
                }
            }
            
            // Add event listeners to clear errors on any field interaction
            const allFields = [partnerField, partnershipField, startDateField, endDateField, statusField, termsField];
            
            allFields.forEach(field => {
                if (!field) return;
                
                // Clear errors on input/change for all fields
                field.addEventListener('input', function() {
                    clearErrorForField(this);
                });
                
                field.addEventListener('change', function() {
                    clearErrorForField(this);
                    
                    // Special handling for selects
                    if (this.tagName === 'SELECT' && this.value !== '') {
                        this.classList.remove('is-invalid');
                        clearErrorForField(this);
                    }
                    
                    // For date fields, run the date validation
                    if (this === startDateField || this === endDateField) {
                        validateDates();
                    }
                });
            });
            
            // Client-side date validation
            function validateDates() {
                // Validate end date is after start date
                if (endDateField && endDateField.value && startDateField && startDateField.value) {
                    const endDate = new Date(endDateField.value);
                    const startDate = new Date(startDateField.value);
                    
                    if (endDate <= startDate) {
                        endDateField.setCustomValidity('End date must be after start date.');
                        endDateField.classList.add('is-invalid');
                        
                        // Show the error message
                        const parentContainer = endDateField.closest('.form-group');
                        parentContainer.classList.remove('field-changed'); // Remove field-changed to show error
                        let errorDisplay = parentContainer.querySelector('.invalid-feedback');
                        if (!errorDisplay) {
                            errorDisplay = document.createElement('div');
                            errorDisplay.className = 'invalid-feedback d-block mb-2';
                            parentContainer.appendChild(errorDisplay);
                        }
                        errorDisplay.style.display = 'block';
                        errorDisplay.textContent = 'End date must be after start date.';
                    } else {
                        endDateField.setCustomValidity('');
                        clearErrorForField(endDateField);
                    }
                } else if (endDateField) {
                    endDateField.setCustomValidity('');
                    clearErrorForField(endDateField);
                }
            }
            
            // Form submission validation
            if (contractForm) {
                contractForm.addEventListener('submit', function(e) {
                    let hasErrors = false;
                    
                    // Partner and Partnership fields are read-only in edit mode, no need to validate
                    
                    // Validate date fields
                    if (startDateField && !startDateField.value) {
                        startDateField.classList.add('is-invalid');
                        const parentContainer = startDateField.closest('.form-group');
                        parentContainer.classList.remove('field-changed');
                        let errorDisplay = parentContainer.querySelector('.invalid-feedback');
                        if (!errorDisplay) {
                            errorDisplay = document.createElement('div');
                            errorDisplay.className = 'invalid-feedback d-block mb-2';
                            parentContainer.appendChild(errorDisplay);
                        }
                        errorDisplay.style.display = 'block';
                        errorDisplay.textContent = 'Start date is required.';
                        hasErrors = true;
                    }
                    
                    // Validate status field
                    if (statusField && statusField.value === '') {
                        statusField.classList.add('is-invalid');
                        const parentContainer = statusField.closest('.form-group');
                        parentContainer.classList.remove('field-changed');
                        let errorDisplay = parentContainer.querySelector('.invalid-feedback');
                        if (!errorDisplay) {
                            errorDisplay = document.createElement('div');
                            errorDisplay.className = 'invalid-feedback d-block mb-2';
                            parentContainer.appendChild(errorDisplay);
                        }
                        errorDisplay.style.display = 'block';
                        errorDisplay.textContent = 'Status is required.';
                        hasErrors = true;
                    }
                    
                    // Validate terms field
                    if (termsField && termsField.value.trim() === '') {
                        termsField.classList.add('is-invalid');
                        const parentContainer = termsField.closest('.form-group');
                        parentContainer.classList.remove('field-changed');
                        let errorDisplay = parentContainer.querySelector('.invalid-feedback');
                        if (!errorDisplay) {
                            errorDisplay = document.createElement('div');
                            errorDisplay.className = 'invalid-feedback d-block mb-2';
                            parentContainer.appendChild(errorDisplay);
                        }
                        errorDisplay.style.display = 'block';
                        errorDisplay.textContent = 'Terms and conditions are required.';
                        hasErrors = true;
                    }
                    
                    // Validate dates
                    validateDates();
                    
                    // Check for any date validation errors
                    if (endDateField && endDateField.validity.customError) {
                        hasErrors = true;
                        const parentContainer = endDateField.closest('.form-group');
                        parentContainer.classList.remove('field-changed');
                    }
                    
                    // Prevent form submission if there are any errors
                    if (hasErrors) {
                        e.preventDefault();
                    }
                });
            }
        });
    </script>
{% endblock %}
